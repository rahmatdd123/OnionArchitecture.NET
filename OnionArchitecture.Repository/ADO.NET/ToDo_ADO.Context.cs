//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnionArchitecture.Repository.ADO.NET
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TODOEntities : DbContext
    {
        public TODOEntities()
            : base("name=TODOEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tbl_ToDo> Tbl_ToDo { get; set; }
        public virtual DbSet<Tbl_M_Status> Tbl_M_Status { get; set; }
    
        public virtual int USP_DeleteToDo(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteToDo", idParameter);
        }
    
        public virtual ObjectResult<USP_GetAllTask_Result> USP_GetAllTask()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllTask_Result>("USP_GetAllTask");
        }
    
        public virtual int USP_InsertToDo(string taskName, string taskDetails, string taskDate, Nullable<int> taskStatus, string createdBy)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskDetailsParameter = taskDetails != null ?
                new ObjectParameter("TaskDetails", taskDetails) :
                new ObjectParameter("TaskDetails", typeof(string));
    
            var taskDateParameter = taskDate != null ?
                new ObjectParameter("TaskDate", taskDate) :
                new ObjectParameter("TaskDate", typeof(string));
    
            var taskStatusParameter = taskStatus.HasValue ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertToDo", taskNameParameter, taskDetailsParameter, taskDateParameter, taskStatusParameter, createdByParameter);
        }
    
        public virtual int USP_UpdateToDo(string taskName, string taskDetails, Nullable<int> taskStatus, string taskDate, Nullable<int> id)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskDetailsParameter = taskDetails != null ?
                new ObjectParameter("TaskDetails", taskDetails) :
                new ObjectParameter("TaskDetails", typeof(string));
    
            var taskStatusParameter = taskStatus.HasValue ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(int));
    
            var taskDateParameter = taskDate != null ?
                new ObjectParameter("TaskDate", taskDate) :
                new ObjectParameter("TaskDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateToDo", taskNameParameter, taskDetailsParameter, taskStatusParameter, taskDateParameter, idParameter);
        }
    }
}
